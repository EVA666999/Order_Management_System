version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: test_case_db 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Kohkau11999
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      # Вместо KAFKA_ADVERTISED_HOST_NAME используем более гибкую конфигурацию
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "new_orders:1:1"
      # Чтобы избежать конфликта ID брокеров
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper

  celery-worker:
    image: python:3.10-slim
    working_dir: /app
    volumes:
      - .:/app
    command: bash -c "pip install -r requirements.txt && celery -A app.tasks.order_task worker --loglevel=info"
    depends_on:
      - redis
      - kafka
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST_local=postgres

  backend:
    image: python:3.10-slim
    working_dir: /app
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    command: bash -c "pip install -r requirements.txt && 
                    echo 'Waiting for db to be ready...' &&
                    sleep 5 &&
                    alembic upgrade head && 
                    uvicorn app.main:app --host 0.0.0.0 --port 8000"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DB_HOST_local=postgres

volumes:
  postgres_data: